{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"captchaWrapperElem\"];\nlet ScriptService = /*#__PURE__*/(() => {\n  class ScriptService {\n    constructor(zone) {\n      this.zone = zone;\n      this.scriptElemId = \"ngx-catpcha-script\";\n      /**\r\n       * Name of the global google recaptcha script\r\n       */\n      this.windowGrecaptcha = \"grecaptcha\";\n      /**\r\n       * Name of enterpise property in the global google recaptcha script\r\n       */\n      this.windowGrecaptchaEnterprise = \"enterprise\";\n      /**\r\n       * Name of the global callback\r\n       */\n      this.windowOnLoadCallbackProperty = \"ngx_captcha_onload_callback\";\n      /**\r\n       * Name of the global callback for enterprise\r\n       */\n      this.windowOnLoadEnterpriseCallbackProperty = \"ngx_captcha_onload_enterprise_callback\";\n      this.globalDomain = \"recaptcha.net\";\n      this.defaultDomain = \"google.com\";\n      this.enterpriseApi = \"enterprise.js\";\n      this.defaultApi = \"api.js\";\n    }\n    registerCaptchaScript(config, render, onLoad, language) {\n      if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\n        // recaptcha script is already loaded\n        // just call the callback\n        if (config.useEnterprise) {\n          this.zone.run(() => {\n            onLoad(window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]);\n          });\n        } else {\n          this.zone.run(() => {\n            onLoad(window[this.windowGrecaptcha]);\n          });\n        }\n        return;\n      }\n      // we need to patch the callback through global variable, otherwise callback is not accessible\n      // note: https://github.com/Enngage/ngx-captcha/issues/2\n      if (config.useEnterprise) {\n        window[this.getCallbackName(true)] = () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]));\n      } else {\n        window[this.getCallbackName(false)] = () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]));\n      }\n      // prepare script elem\n      const scriptElem = document.createElement(\"script\");\n      scriptElem.id = this.scriptElemId;\n      scriptElem.innerHTML = \"\";\n      scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\n      scriptElem.async = true;\n      scriptElem.defer = true;\n      // add script to header\n      document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n    }\n    cleanup() {\n      const elem = document.getElementById(this.scriptElemId);\n      if (elem) {\n        elem.remove();\n      }\n      window[this.getCallbackName()] = undefined;\n      window[this.windowGrecaptcha] = undefined;\n    }\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\n    grecaptchaScriptLoaded(useEnterprise) {\n      if (!window[this.getCallbackName(useEnterprise)] || !window[this.windowGrecaptcha]) {\n        return false;\n      } else if (useEnterprise && window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]) {\n        return true;\n        // if only enterprise script is loaded we need to check some v3's method\n      } else if (window[this.windowGrecaptcha].execute) {\n        return true;\n      }\n      return false;\n    }\n    /**\r\n     * Gets global callback name\r\n     * @param useEnterprise Optional flag for enterprise script\r\n     * @private\r\n     */\n    getCallbackName(useEnterprise) {\n      return useEnterprise ? this.windowOnLoadEnterpriseCallbackProperty : this.windowOnLoadCallbackProperty;\n    }\n    /**\r\n     * Gets language param used in script url\r\n     */\n    getLanguageParam(hl) {\n      if (!hl) {\n        return \"\";\n      }\n      return `&hl=${hl}`;\n    }\n    /**\r\n     * Url to google api script\r\n     */\n    getCaptchaScriptUrl(config, render, language) {\n      const domain = config.useGlobalDomain ? this.globalDomain : this.defaultDomain;\n      const api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\n      const callback = this.getCallbackName(config.useEnterprise);\n      return `https://www.${domain}/recaptcha/${api}?onload=${callback}&render=${render}${this.getLanguageParam(language)}`;\n    }\n  }\n  /** @nocollapse */ScriptService.ɵfac = function ScriptService_Factory(t) {\n    return new (t || ScriptService)(i0.ɵɵinject(i0.NgZone));\n  };\n  /** @nocollapse */\n  ScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScriptService,\n    factory: ScriptService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ScriptService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet BaseReCaptchaComponentDirective = /*#__PURE__*/(() => {\n  class BaseReCaptchaComponentDirective {\n    constructor(renderer, zone, injector, scriptService) {\n      this.renderer = renderer;\n      this.zone = zone;\n      this.injector = injector;\n      this.scriptService = scriptService;\n      /**\r\n       * Prefix of the captcha element\r\n       */\n      this.captchaElemPrefix = \"ngx_captcha_id_\";\n      this.setupCaptcha = true;\n      /**\r\n       * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n       */\n      this.useGlobalDomain = false;\n      this.useEnterprise = false;\n      /**\r\n       * Type\r\n       */\n      this.type = \"image\";\n      /**\r\n       * Tab index\r\n       */\n      this.tabIndex = 0;\n      /**\r\n       * Called when captcha receives successful response.\r\n       * Captcha response token is passed to event.\r\n       */\n      this.success = new EventEmitter();\n      /**\r\n       * Called when captcha is loaded. Event receives id of the captcha\r\n       */\n      this.load = new EventEmitter();\n      /**\r\n       * Called when captcha is reset.\r\n       */\n      this.reset = new EventEmitter();\n      /**\r\n       * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n       */\n      this.ready = new EventEmitter();\n      /**\r\n       * Error callback\r\n       */\n      this.error = new EventEmitter();\n      /**\r\n       * Expired callback\r\n       */\n      this.expire = new EventEmitter();\n      /**\r\n       * Indicates if captcha should be set on load\r\n       */\n      this.setupAfterLoad = false;\n      /**\r\n       * If enabled, captcha will reset after receiving success response. This is useful\r\n       * when invisible captcha need to be resolved multiple times on same page\r\n       */\n      this.resetCaptchaAfterSuccess = false;\n      /**\r\n       * Required by ControlValueAccessor\r\n       */\n      this.onChange = val => {};\n      this.onTouched = val => {};\n      /**\r\n       * Indicates if captcha is loaded\r\n       */\n      this.isLoaded = false;\n    }\n    ngAfterViewInit() {\n      var _a;\n      this.control = (_a = this.injector.get(NgControl, undefined, InjectFlags.Optional)) === null || _a === void 0 ? void 0 : _a.control;\n    }\n    ngAfterViewChecked() {\n      if (this.setupCaptcha) {\n        this.setupCaptcha = false;\n        this.setupComponent();\n      }\n    }\n    ngOnChanges(changes) {\n      // cleanup scripts if language changed because they need to be reloaded\n      if (changes && changes.hl) {\n        // cleanup scripts when language changes\n        if (!changes.hl.firstChange && changes.hl.currentValue !== changes.hl.previousValue) {\n          this.scriptService.cleanup();\n        }\n      }\n      if (changes && changes.useGlobalDomain) {\n        // cleanup scripts when domain changes\n        if (!changes.useGlobalDomain.firstChange && changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue) {\n          this.scriptService.cleanup();\n        }\n      }\n      this.setupCaptcha = true;\n    }\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     */\n    getResponse() {\n      return this.reCaptchaApi.getResponse(this.captchaId);\n    }\n    /**\r\n     * Gets Id of captcha widget\r\n     */\n    getCaptchaId() {\n      return this.captchaId;\n    }\n    /**\r\n     * Resets captcha\r\n     */\n    resetCaptcha() {\n      this.zone.run(() => {\n        // reset captcha using Google js api\n        this.reCaptchaApi.reset();\n        // required due to forms\n        this.onChange(undefined);\n        this.onTouched(undefined);\n        // trigger reset event\n        this.reset.next();\n      });\n    }\n    /**\r\n     * Gets last submitted captcha response\r\n     */\n    getCurrentResponse() {\n      return this.currentResponse;\n    }\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     */\n    reloadCaptcha() {\n      this.setupComponent();\n    }\n    ensureCaptchaElem(captchaElemId) {\n      const captchaElem = document.getElementById(captchaElemId);\n      if (!captchaElem) {\n        throw Error(`Captcha element with id '${captchaElemId}' was not found`);\n      }\n      // assign captcha alem\n      this.captchaElem = captchaElem;\n    }\n    /**\r\n     * Responsible for instantiating captcha element\r\n     */\n    renderReCaptcha() {\n      // run outside angular zone due to timeout issues when testing\n      // details: https://github.com/Enngage/ngx-captcha/issues/26\n      this.zone.runOutsideAngular(() => {\n        // to fix reCAPTCHA placeholder element must be an element or id\n        // https://github.com/Enngage/ngx-captcha/issues/96\n        setTimeout(() => {\n          this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\n          this.ready.next();\n        }, 0);\n      });\n    }\n    /**\r\n     * Called when captcha receives response\r\n     * @param callback Callback\r\n     */\n    handleCallback(callback) {\n      this.currentResponse = callback;\n      this.success.next(callback);\n      this.zone.run(() => {\n        this.onChange(callback);\n        this.onTouched(callback);\n      });\n      if (this.resetCaptchaAfterSuccess) {\n        this.resetCaptcha();\n      }\n    }\n    getPseudoUniqueNumber() {\n      return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n    }\n    setupComponent() {\n      // captcha specific setup\n      this.captchaSpecificSetup();\n      // create captcha wrapper\n      this.createAndSetCaptchaElem();\n      this.scriptService.registerCaptchaScript({\n        useGlobalDomain: this.useGlobalDomain,\n        useEnterprise: this.useEnterprise\n      }, \"explicit\", grecaptcha => {\n        this.onloadCallback(grecaptcha);\n      }, this.hl);\n    }\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     */\n    onloadCallback(grecapcha) {\n      // assign reference to reCaptcha Api once its loaded\n      this.reCaptchaApi = grecapcha;\n      if (!this.reCaptchaApi) {\n        throw Error(`ReCaptcha Api was not initialized correctly`);\n      }\n      // loaded flag\n      this.isLoaded = true;\n      // fire load event\n      this.load.next();\n      // render captcha\n      this.renderReCaptcha();\n      // setup component if it was flagged as such\n      if (this.setupAfterLoad) {\n        this.setupAfterLoad = false;\n        this.setupComponent();\n      }\n    }\n    generateNewElemId() {\n      return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n    }\n    createAndSetCaptchaElem() {\n      // generate new captcha id\n      this.captchaElemId = this.generateNewElemId();\n      if (!this.captchaElemId) {\n        throw Error(`Captcha elem Id is not set`);\n      }\n      if (!this.captchaWrapperElem) {\n        throw Error(`Captcha DOM element is not initialized`);\n      }\n      // remove old html\n      this.captchaWrapperElem.nativeElement.innerHTML = \"\";\n      // create new wrapper for captcha\n      const newElem = this.renderer.createElement(\"div\");\n      newElem.id = this.captchaElemId;\n      this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\n      // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\n      // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\n      setTimeout(() => {\n        // update captcha elem\n        if (this.captchaElemId) {\n          this.ensureCaptchaElem(this.captchaElemId);\n        }\n      }, 0);\n    }\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\n    writeValue(obj) {}\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     */\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\r\n     * Handles error callback\r\n     */\n    handleErrorCallback() {\n      this.zone.run(() => {\n        this.onChange(undefined);\n        this.onTouched(undefined);\n      });\n      this.error.next();\n    }\n    /**\r\n     * Handles expired callback\r\n     */\n    handleExpireCallback() {\n      this.expire.next();\n      // reset captcha on expire callback\n      this.resetCaptcha();\n    }\n  }\n  /** @nocollapse */BaseReCaptchaComponentDirective.ɵfac = function BaseReCaptchaComponentDirective_Factory(t) {\n    return new (t || BaseReCaptchaComponentDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n  };\n  /** @nocollapse */\n  BaseReCaptchaComponentDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseReCaptchaComponentDirective,\n    inputs: {\n      siteKey: \"siteKey\",\n      useGlobalDomain: \"useGlobalDomain\",\n      useEnterprise: \"useEnterprise\",\n      type: \"type\",\n      hl: \"hl\",\n      tabIndex: \"tabIndex\"\n    },\n    outputs: {\n      success: \"success\",\n      load: \"load\",\n      reset: \"reset\",\n      ready: \"ready\",\n      error: \"error\",\n      expire: \"expire\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return BaseReCaptchaComponentDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar ReCaptchaType = /*#__PURE__*/(() => {\n  (function (ReCaptchaType) {\n    ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\n    ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\n  })(ReCaptchaType || (ReCaptchaType = {}));\n  return ReCaptchaType;\n})();\nlet InvisibleReCaptchaComponent = /*#__PURE__*/(() => {\n  class InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective {\n    constructor(renderer, zone, injector, scriptService) {\n      super(renderer, zone, injector, scriptService);\n      this.renderer = renderer;\n      this.zone = zone;\n      this.injector = injector;\n      this.scriptService = scriptService;\n      /**\r\n       * This size representing invisible captcha\r\n       */\n      this.size = 'invisible';\n      /**\r\n       * Theme\r\n       */\n      this.theme = 'light';\n      /**\r\n       * Badge\r\n       */\n      this.badge = 'bottomright';\n      this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\n    }\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n    }\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     */\n    execute() {\n      // execute captcha\n      this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\n    }\n    captchaSpecificSetup() {}\n    /**\r\n    * Gets reCaptcha properties\r\n    */\n    getCaptchaProperties() {\n      return {\n        'sitekey': this.siteKey,\n        'callback': response => this.zone.run(() => this.handleCallback(response)),\n        'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n        'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n        'badge': this.badge,\n        'type': this.type,\n        'tabindex': this.tabIndex,\n        'size': this.size,\n        'theme': this.theme\n      };\n    }\n  }\n  /** @nocollapse */InvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(t) {\n    return new (t || InvisibleReCaptchaComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n  };\n  /** @nocollapse */\n  InvisibleReCaptchaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: InvisibleReCaptchaComponent,\n    selectors: [[\"ngx-invisible-recaptcha\"]],\n    viewQuery: function InvisibleReCaptchaComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n      }\n    },\n    inputs: {\n      theme: \"theme\",\n      badge: \"badge\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n      multi: true\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"captchaWrapperElem\", \"\"]],\n    template: function InvisibleReCaptchaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return InvisibleReCaptchaComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ReCaptcha2Component = /*#__PURE__*/(() => {\n  class ReCaptcha2Component extends BaseReCaptchaComponentDirective {\n    constructor(renderer, zone, injector, scriptService) {\n      super(renderer, zone, injector, scriptService);\n      this.renderer = renderer;\n      this.zone = zone;\n      this.injector = injector;\n      this.scriptService = scriptService;\n      /**\r\n      * Name of the global expire callback\r\n      */\n      this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n      /**\r\n      * Name of the global error callback\r\n      */\n      this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n      /**\r\n       * Theme\r\n       */\n      this.theme = 'light';\n      /**\r\n      * Size\r\n      */\n      this.size = 'normal';\n      this.recaptchaType = ReCaptchaType.ReCaptcha2;\n    }\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n    }\n    ngOnDestroy() {\n      window[this.windowOnErrorCallbackProperty] = {};\n      window[this.windowOnExpireCallbackProperty] = {};\n    }\n    captchaSpecificSetup() {\n      this.registerCallbacks();\n    }\n    /**\r\n     * Gets reCaptcha properties\r\n    */\n    getCaptchaProperties() {\n      return {\n        'sitekey': this.siteKey,\n        'callback': response => this.zone.run(() => this.handleCallback(response)),\n        'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n        'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n        'theme': this.theme,\n        'type': this.type,\n        'size': this.size,\n        'tabindex': this.tabIndex\n      };\n    }\n    /**\r\n     * Registers global callbacks\r\n    */\n    registerCallbacks() {\n      window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\n      window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\n    }\n  }\n  /** @nocollapse */ReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(t) {\n    return new (t || ReCaptcha2Component)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n  };\n  /** @nocollapse */\n  ReCaptcha2Component.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ReCaptcha2Component,\n    selectors: [[\"ngx-recaptcha2\"]],\n    viewQuery: function ReCaptcha2Component_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n      }\n    },\n    inputs: {\n      theme: \"theme\",\n      size: \"size\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ReCaptcha2Component),\n      multi: true\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"captchaWrapperElem\", \"\"]],\n    template: function ReCaptcha2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ReCaptcha2Component;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ReCaptchaV3Service = /*#__PURE__*/(() => {\n  class ReCaptchaV3Service {\n    constructor(scriptService, zone) {\n      this.scriptService = scriptService;\n      this.zone = zone;\n    }\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param callback Callback function to to handle token\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     * @param errorCallback Optional Callback function to handle errors\r\n     */\n    execute(siteKey, action, callback, config, errorCallback) {\n      this.executeAsPromise(siteKey, action, config).then(callback).catch(error => errorCallback ? errorCallback(error) : console.error(error));\n    }\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     */\n    executeAsPromise(siteKey, action, config) {\n      return new Promise((resolve, reject) => {\n        const configuration = config || {};\n        const onRegister = grecaptcha => {\n          this.zone.runOutsideAngular(() => {\n            try {\n              grecaptcha.execute(siteKey, {\n                action\n              }).then(token => this.zone.run(() => resolve(token)));\n            } catch (error) {\n              reject(error);\n            }\n          });\n        };\n        this.scriptService.registerCaptchaScript(configuration, siteKey, onRegister);\n      });\n    }\n  }\n  /** @nocollapse */ReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) {\n    return new (t || ReCaptchaV3Service)(i0.ɵɵinject(ScriptService), i0.ɵɵinject(i0.NgZone));\n  };\n  /** @nocollapse */\n  ReCaptchaV3Service.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ReCaptchaV3Service,\n    factory: ReCaptchaV3Service.ɵfac,\n    providedIn: \"root\"\n  });\n  return ReCaptchaV3Service;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxCaptchaModule = /*#__PURE__*/(() => {\n  class NgxCaptchaModule {}\n  /** @nocollapse */NgxCaptchaModule.ɵfac = function NgxCaptchaModule_Factory(t) {\n    return new (t || NgxCaptchaModule)();\n  };\n  /** @nocollapse */\n  NgxCaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxCaptchaModule\n  });\n  /** @nocollapse */\n  NgxCaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ScriptService, ReCaptchaV3Service],\n    imports: [CommonModule]\n  });\n  return NgxCaptchaModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseReCaptchaComponentDirective, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n//# sourceMappingURL=ngx-captcha.mjs.map","map":null,"metadata":{},"sourceType":"module"}