{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TransactionService = /*#__PURE__*/(() => {\n  class TransactionService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://localhost:8083/transaction';\n    }\n    getAllTransaction() {\n      return this.http.get(`${this.baseUrl}/all`);\n    }\n    getTransaction(id_trans) {\n      const url = `${this.baseUrl}/${id_trans}`;\n      return this.http.get(url);\n    }\n    updateTransaction(transaction) {\n      const url = `${this.baseUrl}/${transaction}`;\n      return this.http.put(url, transaction);\n    }\n    deleteTransaction(id_trans) {\n      const url = `${this.baseUrl}/${id_trans}`;\n      return this.http.delete(url);\n    }\n    getTransactionsByRib(ribEmetteur) {\n      return this.http.get(this.baseUrl + ribEmetteur, {\n        responseType: 'arraybuffer'\n      });\n    }\n    //addTransaction(transaction: TransactionDTO): Observable<string> {\n    //return this.http.post<string>(`${this.baseUrl}/add3`, transaction);\n    //}\n    addTransaction(transaction) {\n      const transactionDTO = {\n        id_acc: transaction.id_acc,\n        description: transaction.description,\n        ribEmetteur: transaction.ribEmetteur,\n        ribRecipient: transaction.ribRecipient,\n        amount: transaction.amount,\n        type: this.getTransactionType(transaction)\n      };\n      return this.http.post(`${this.baseUrl}/add3`, transactionDTO);\n    }\n    getTransactionType(transaction) {\n      if ('ribRecipient' in transaction) {\n        return 'TRANSFER';\n      }\n      if ('ribEmetteur' in transaction) {\n        return 'WITHDRAWL';\n      }\n      if ('amount' in transaction && transaction.amount < 0) {\n        return 'LOANPAYMENTS';\n      }\n      return 'DEPOSITS';\n    }\n  }\n  TransactionService.ɵfac = function TransactionService_Factory(t) {\n    return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  TransactionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransactionService,\n    factory: TransactionService.ɵfac,\n    providedIn: 'root'\n  });\n  return TransactionService;\n})();","map":null,"metadata":{},"sourceType":"module"}