{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { tap } from \"rxjs\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EventService = /*#__PURE__*/(() => {\n  class EventService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://localhost:8083/event';\n      this.events = [];\n    }\n    retrieveAllevents() {\n      return this.http.get(`${this.baseUrl}/all`);\n    }\n    assignEventToUser(id_event, id_user) {\n      const url = `${this.baseUrl}/${id_event}/assign/${id_user}`;\n      return this.http.post(url, {});\n    }\n    updateEventLikes(eventId, userId, action) {\n      const url = `${this.baseUrl}/likes/${eventId}?userId=${userId}&action=${action}`;\n      return this.http.patch(url, null).pipe(tap(updatedEvent => {\n        const index = this.events.findIndex(event => event.id_event === updatedEvent.id_event);\n        if (index !== -1) {\n          this.events[index].likes = updatedEvent.likes;\n          this.events[index].dislikes = updatedEvent.dislikes;\n        }\n      }));\n    }\n    updateEventDislikes(eventId, userId, action) {\n      const url = `${this.baseUrl}/dislikes/${eventId}?userId=${userId}&action=${action}`;\n      return this.http.patch(url, null).pipe(tap(updatedEvent => {\n        const index = this.events.findIndex(event => event.id_event === updatedEvent.id_event);\n        if (index !== -1) {\n          this.events[index].likes = updatedEvent.likes;\n          this.events[index].dislikes = updatedEvent.dislikes;\n        }\n      }));\n    }\n    likeEvent(eventId, userId, action) {\n      const url = `${this.baseUrl}/likes/${eventId}?userId=${userId}&action=${action}`;\n      return this.http.patch(url, {});\n    }\n    dislikeEvent(eventId, userId) {\n      const url = `${this.baseUrl}/${eventId}/dislike/${userId}`;\n      return this.http.put(url, null);\n    }\n    deleteevent(id_event) {\n      const url = `${this.baseUrl}/delete/${id_event}`;\n      return this.http.delete(url);\n    }\n    addevent(event) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(`${this.baseUrl}/add`, event, {\n        headers\n      });\n    }\n    updateEvent(id_event, updatedEvent) {\n      const url = `${this.baseUrl}/${id_event}`;\n      return this.http.put(url, updatedEvent);\n    }\n    getEvent(id) {\n      const url = `${this.baseUrl}/get/${id}`;\n      return this.http.get(url);\n    }\n  }\n  EventService.ɵfac = function EventService_Factory(t) {\n    return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  EventService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventService,\n    factory: EventService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventService;\n})();","map":null,"metadata":{},"sourceType":"module"}